genClientList

var originData = {
customList: decodeURIComponent('<% nvram_char_to_ascii("", "custom_clientlist"); %>').replace(/&#62/g, ">").replace(
/&#60/g, "<").split('<'),
asusDevice: decodeURIComponent('<% nvram_char_to_ascii("", "asus_device_list"); %>').replace(/&#62/g, ">").replace(/
&#60/g, "<").split('<'),
fromDHCPLease: <% dhcpLeaseMacList(); %>,
staticList: decodeURIComponent('<% nvram_char_to_ascii("", "dhcp_staticlist"); %>').replace(/&#62/g, ">").replace(/&
#60/g, "<").split('<'),
fromNetworkmapd: '<% get_client_detail_info(); %>'.replace(/&#62/g, ">").replace(/&#60/g, "<").split('<'),
fromBWDPI: <% bwdpi_device_info(); %>.replace(/&#62/g, ">").replace(/&#60/g, "<").split('<'),
nmpClient: decodeURIComponent('<% load_clientlist_char_to_ascii(); %>').replace(/&#62/g, ">").replace(/&#60/g, "<").
split('<'), //Record the client connected to the router before.
wlList_2g: [<% wl_sta_list_2g(); %>],
wlList_5g: [<% wl_sta_list_5g(); %>],
wlList_5g_2: [<% wl_sta_list_5g_2(); %>],
wlListInfo_2g: [<% wl_stainfo_list_2g(); %>],
wlListInfo_5g: [<% wl_stainfo_list_5g(); %>],
wlListInfo_5g_2: [<% wl_stainfo_list_5g_2(); %>],
qosRuleList: decodeURIComponent('<% nvram_char_to_ascii("", "qos_rulelist"); %>').replace(/&#62/g, ">").replace(/&#6
0/g, "<").split('<'),
time_scheduling_enable: decodeURIComponent('<% nvram_char_to_ascii("", "MULTIFILTER_ENABLE"); %>').replace(/&#62/g,
">").replace(/&#60/g, "<").split('>'),
time_scheduling_mac: decodeURIComponent('<% nvram_char_to_ascii("", "MULTIFILTER_MAC"); %>').replace(/&#62/g, ">").r
eplace(/&#60/g, "<").split('>'),
time_scheduling_devicename: decodeURIComponent('<% nvram_char_to_ascii("", "MULTIFILTER_DEVICENAME"); %>').replace(/
&#62/g, ">").replace(/&#60/g, "<").split('>'),
time_scheduling_daytime: decodeURIComponent('<% nvram_char_to_ascii("", "MULTIFILTER_MACFILTER_DAYTIME"); %>').repla
ce(/&#62/g, ">").replace(/&#60/g, "<").split('>'),
current_time: '<% uptime(); %>',
wtf_rulelist: decodeURIComponent('<% nvram_char_to_ascii("", "wtf_rulelist"); %>').replace(/&#62/g, ">").replace(/&#
60/g, "<").split('<'),
init: true
}

leaseArray = {hostname: [], mac: []};
for(var i = 0; i < originData.fromDHCPLease.length; i += 1) {
var dhcpMac = originData.fromDHCPLease[i][0].toUpperCase();
var dhcpName = decodeURIComponent(originData.fromDHCPLease[i][1]);
if(dhcpMac != "") {
if(dhcpName == "*") {
dhcpName = dhcpMac;
}
leaseArray.mac.push(dhcpMac);
leaseArray.hostname.push(dhcpName);
}
}
clientList = [];
totalClientNum.online = 0;
totalClientNum.wireless = 0;
for(var i=0; i<wl_nband_title.length; i++) totalClientNum.wireless_ifnames[i] = 0;
for(var schedulingIdx = 0; schedulingIdx < originData.time_scheduling_mac.length; schedulingIdx += 1) {
if(originData.time_scheduling_mac[schedulingIdx] != "") {
var scheduling_array = new Array();
scheduling_array[0] = originData.time_scheduling_enable[schedulingIdx];
scheduling_array[1] = originData.time_scheduling_daytime[schedulingIdx];
time_scheduling_array[originData.time_scheduling_mac[schedulingIdx]] = scheduling_array;
}
}
var wirelessList = "";
var wirelessListArray = new Array();
var local_mac = 'BC:EE:7B:C5:57:38';
if(fromNetworkmapdCache.length > 1 && networkmap_fullscan == 1) {
originData.fromNetworkmapd = fromNetworkmapdCache;
var wirelessListCache = cookie.get("wireless_list_" + local_mac + "_temp");
if(wirelessListCache != null && wirelessListCache != "") {
wirelessList = wirelessListCache;
}
}
else {
wirelessList = cookie.get("wireless_list_" + local_mac);
}
if(wirelessList != null && wirelessList != "") {
var wirelessList_row = wirelessList.split("<");
for(var i = 0; i < wirelessList_row.length; i += 1) {
var wirelessList_col = wirelessList_row[i].split(">");
wirelessListArray[wirelessList_col[0]] = "No";
}
}
for(var i=0; i<originData.asusDevice.length; i++){
var thisClient = originData.asusDevice[i].split(">");
var thisClientMacAddr = (typeof thisClient[3] == "undefined") ? false : thisClient[3].toUpperCase();
if(!thisClientMacAddr || thisClient.length != 8 || thisClient[2] == '192.168.1.1'){
continue;
}
if(typeof clientList[thisClientMacAddr] == "undefined"){
clientList.push(thisClientMacAddr);
clientList[thisClientMacAddr] = new setClientAttr();
clientList[thisClientMacAddr].from = "asusDevice";
}
else{
clientList[thisClientMacAddr].from = "asusDevice";
}
if(!downsize_4m_support) {
clientList[thisClientMacAddr].type = "2";// asus default setting router icon
clientList[thisClientMacAddr].defaultType = "2";
}
clientList[thisClientMacAddr].name = thisClient[1];
if(thisClient[1].toString().toLowerCase().search("cam") != -1 && !downsize_4m_support) {
clientList[thisClientMacAddr].type = "5";// AiCam icon
clientList[thisClientMacAddr].defaultType = "5";
}
clientList[thisClientMacAddr].ip = thisClient[2];
clientList[thisClientMacAddr].mac = thisClient[3].toUpperCase();
clientList[thisClientMacAddr].isGateway = (thisClient[2] == '192.168.1.1') ? true : false;
clientList[thisClientMacAddr].isWebServer = true;
clientList[thisClientMacAddr].ssid = thisClient[5];
clientList[thisClientMacAddr].isASUS = true;
clientList[thisClientMacAddr].opMode = (typeof thisClient[7] == "undefined") ? 0 : thisClient[7]; //0:unknow, 1: router, 2: repeater, 3: AP, 4: Media Bridge
if(clientList[thisClientMacAddr].opMode == "2" && !downsize_4m_support) {
clientList[thisClientMacAddr].type = "24";
clientList[thisClientMacAddr].defaultType = "24";
}
clientList[thisClientMacAddr].isOnline = true;
totalClientNum.online++;
clientList[thisClientMacAddr].vendor = "Asus";
updateTimeScheduling();
}
for(var i=0; i<originData.fromNetworkmapd.length; i++){
var thisClient = originData.fromNetworkmapd[i].split(">");
var thisClientMacAddr = (typeof thisClient[3] == "undefined") ? false : thisClient[3].toUpperCase();
if(!thisClientMacAddr || thisClient.length != 8){
continue;
}
if(typeof clientList[thisClientMacAddr] == "undefined"){
clientList.push(thisClientMacAddr);
clientList[thisClientMacAddr] = new setClientAttr();
clientList[thisClientMacAddr].from = "networkmapd";
}
else{
if(clientList[thisClientMacAddr].from == "asusDevice") {
clientList[thisClientMacAddr].from = "networkmapd";
continue;
}
else {
clientList[thisClientMacAddr].macRepeat++;
totalClientNum.online++;
continue;
}
}
if(clientList[thisClientMacAddr].isASUS) {
continue;
}
if(!downsize_4m_support) {
clientList[thisClientMacAddr].type = thisClient[0];
clientList[thisClientMacAddr].defaultType = thisClient[0];
}
clientList[thisClientMacAddr].ip = thisClient[2];
clientList[thisClientMacAddr].mac = thisClient[3].toUpperCase();
var ori_name = (thisClient[1].trim() != "") ? thisClient[1].trim() : retHostName(clientList[thisClientMacAddr].mac);
if(clientList[thisClientMacAddr].name == ""){
clientList[thisClientMacAddr].name = replaceClientName(ori_name, thisClientMacAddr);
}
if(ori_name != clientList[thisClientMacAddr].mac && clientList[thisClientMacAddr].type == "0" && !downsize_4m_support){
clientList[thisClientMacAddr].type = convType(ori_name);
clientList[thisClientMacAddr].defaultType = clientList[thisClientMacAddr].type;
}
clientList[thisClientMacAddr].isGateway = (thisClient[2] == '192.168.1.1') ? true : false;
clientList[thisClientMacAddr].isWebServer = (thisClient[4] == 0) ? false : true;
clientList[thisClientMacAddr].isPrinter = (thisClient[5] == 0) ? false : true;
clientList[thisClientMacAddr].isITunes = (thisClient[6] == 0) ? false : true;
clientList[thisClientMacAddr].dpiDevice = (typeof thisClient[7] == "undefined") ? "" : thisClient[7]; //This field just for apple model
clientList[thisClientMacAddr].isOnline = true;
totalClientNum.online++;
var ouiVenderName = "";
var manufacturer_id = thisClientMacAddr.replace(/\:/g,"").substring(0, 6);
if(ouiClientListArray[manufacturer_id] != undefined) {
ouiVenderName = transformManufacturerName(ouiClientListArray[manufacturer_id]);
ouiVenderName = ouiVenderName.toLowerCase();
ouiVenderName = ouiVenderName.toUpperCase().charAt(0) + ouiVenderName.substring(1);
}
clientList[thisClientMacAddr].vendor = ouiVenderName;
updateTimeScheduling();
}
for(var i=0; i<originData.fromBWDPI.length; i++){
var thisClient = originData.fromBWDPI[i].split(">");
var thisClientMacAddr = (typeof thisClient[0] == "undefined") ? false : thisClient[0].toUpperCase();
if(typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(clientList[thisClientMacAddr].isASUS) {
continue;
}
var networkmapd_name = clientList[thisClientMacAddr].name;
var bwdpi_name = "";
if(thisClient[1] != ""){
clientList[thisClientMacAddr].name = replaceClientName(thisClient[1], thisClientMacAddr);
if(clientList[thisClientMacAddr].type == "0" && !downsize_4m_support) {
clientList[thisClientMacAddr].type = convType(thisClient[1]);
clientList[thisClientMacAddr].defaultType = clientList[thisClientMacAddr].type;
}
bwdpi_name = thisClient[1];
}
if(thisClient[2] != "" && thisClient[2] != undefined){
var venderMatch = thisClient[2].trim().toLowerCase().match(venderArrayRE);
var venderName = "";
if(Boolean(venderMatch)) {
venderName = venderMatch[0].toLowerCase();
venderName = venderName.toUpperCase().charAt(0) + venderName.substring(1);
clientList[thisClientMacAddr].vendor = venderName;
}
else {
venderName = thisClient[2].trim().toLowerCase();
venderName = venderName.toUpperCase().charAt(0) + venderName.substring(1);
clientList[thisClientMacAddr].vendor = venderName;
}
}
if(thisClient[3] != "" && thisClient[3] != undefined){
clientList[thisClientMacAddr].dpiType = thisClient[3].trim();
if(!downsize_4m_support) {
var dpi_type = [["android device", "9"], ["apple ios device", "10"], ["smarttv", "23"], ["game console", "7"], ["ip network camera", "5"], ["nas", "4"],
["router", "2"], ["voip gateway", "2"], ["wireless", "2"], ["printer", "18"], ["scanner", "26"], ["smartphone", "33"], ["tablet", "33"],
["voip phone", "33"], ["desktop/laptop", "34"]];
for(var idx_dpi_type = 0; idx_dpi_type < dpi_type.length; idx_dpi_type += 1) {
if(thisClient[3].trim().toLowerCase() == dpi_type[idx_dpi_type][0]) {
clientList[thisClientMacAddr].type = dpi_type[idx_dpi_type][1];
clientList[thisClientMacAddr].defaultType = dpi_type[idx_dpi_type][1];
break;
}
}
}
}
if(thisClient[4] != "" && thisClient[4] != undefined){
clientList[thisClientMacAddr].dpiDevice = thisClient[4].trim();
if(!downsize_4m_support) {
var dpi_name = new Array();
dpi_name["desktop/laptop"] = [["mac os", "6"], ["macintosh", "14"], ["windows", "1"], ["linux", "22"]];
dpi_name["smartphone"] = [["apple", "10"], ["iphone", "10"], ["windows phone", "19"], ["nokia", "19"], ["mobile", "19"], ["asus", "28"], ["zenfone", "28"], ["padfone", "28"]];
dpi_name["smarttv"] = [["apple", "11"], ["chromecast", "27"]];
dpi_name["tablet"] = [["apple", "21"], ["ipad", "21"], ["kindle", "25"], ["asus", "29"], ["transformer", "29"], ["fonepad", "29"]];
var dpi_type_key = clientList[thisClientMacAddr].dpiType.toLowerCase();
var dpi_name_item = dpi_name[dpi_type_key];
if(dpi_name_item != undefined) {
switch(dpi_type_key) {
case "smartphone" :
clientList[thisClientMacAddr].type = "9";
clientList[thisClientMacAddr].defaultType = "9";
break;
case "smarttv" :
clientList[thisClientMacAddr].type = "23";
clientList[thisClientMacAddr].defaultType = "23";
break;
case "tablet" :
clientList[thisClientMacAddr].type = "20";
clientList[thisClientMacAddr].defaultType = "20";
break;
}
for(var idx_dpi_name = 0; idx_dpi_name < dpi_name_item.length; idx_dpi_name += 1) {
if(clientList[thisClientMacAddr].dpiDevice.toLowerCase().search(dpi_name_item[idx_dpi_name][0]) != -1) {
clientList[thisClientMacAddr].type = dpi_name_item[idx_dpi_name][1];
clientList[thisClientMacAddr].defaultType = dpi_name_item[idx_dpi_name][1];
break;
}
}
}
}
}
if(thisClient[3] != "" && thisClient[3] != undefined && thisClient[4] != "" && thisClient[4] != undefined) {
var filterStr = "android";
var replaceName = clientList[thisClientMacAddr].name;
if(networkmapd_name.toLowerCase().search(filterStr) != -1 || bwdpi_name.toLowerCase().search(filterStr) != -1) {
if(thisClient[3].toLowerCase().search(filterStr) != -1 && thisClient[4].toLowerCase().search(filterStr) != -1) {
replaceName = clientList[thisClientMacAddr].vendor + "(Android)";
}
else {
replaceName = thisClient[4];
}
}
clientList[thisClientMacAddr].name = replaceName;
}
}
for(var i=0; i<originData.customList.length; i++){
var thisClient = originData.customList[i].split(">");
var thisClientMacAddr = (typeof thisClient[1] == "undefined") ? false : thisClient[1].toUpperCase();
if(!thisClientMacAddr || thisClient.length != 6){
continue;
}
if(typeof clientList[thisClientMacAddr] == "undefined"){
clientList.push(thisClientMacAddr);
clientList[thisClientMacAddr] = new setClientAttr();
clientList[thisClientMacAddr].from = "customList";
}
if(thisClient[0] == "New device") {
if(clientList[thisClientMacAddr].name == "") {
clientList[thisClientMacAddr].nickName = thisClient[0];
}
}
else {
clientList[thisClientMacAddr].nickName = thisClient[0];
}
clientList[thisClientMacAddr].mac = thisClient[1].toUpperCase();
clientList[thisClientMacAddr].group = thisClient[2];
clientList[thisClientMacAddr].type = thisClient[3];
clientList[thisClientMacAddr].callback = thisClient[4];
if(clientList[thisClientMacAddr].vendor == "") {
var ouiVenderName = "";
var manufacturer_id = thisClientMacAddr.replace(/\:/g,"").substring(0, 6);
if(ouiClientListArray[manufacturer_id] != undefined) {
ouiVenderName = transformManufacturerName(ouiClientListArray[manufacturer_id]);
ouiVenderName = ouiVenderName.toLowerCase();
ouiVenderName = ouiVenderName.toUpperCase().charAt(0) + ouiVenderName.substring(1);
}
clientList[thisClientMacAddr].vendor = ouiVenderName;
}
}
for(var i=0; i<originData.wlList_2g.length; i++){
var thisClientMacAddr = (typeof originData.wlList_2g[i][0] == "undefined") ? false : originData.wlList_2g[i][0].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(originData.wlList_2g[i][1] == "Yes") {
clientList[thisClientMacAddr].rssi = originData.wlList_2g[i][3];
clientList[thisClientMacAddr].isWL = 1;
totalClientNum.wireless += clientList[thisClientMacAddr].macRepeat;
totalClientNum.wireless_ifnames[clientList[thisClientMacAddr].isWL-1] += clientList[thisClientMacAddr].macRepeat;
wirelessListArray[thisClientMacAddr] = originData.wlList_2g[i][1];
}
else {
clientList[thisClientMacAddr].isWL = 1;
wirelessListArray[thisClientMacAddr] = originData.wlList_2g[i][1];
}
}
for(var i=0; i<originData.wlList_5g.length; i++){
var thisClientMacAddr = (typeof originData.wlList_5g[i][0] == "undefined") ? false : originData.wlList_5g[i][0].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(originData.wlList_5g[i][1] == "Yes") {
clientList[thisClientMacAddr].rssi = originData.wlList_5g[i][3];
clientList[thisClientMacAddr].isWL = 2;
totalClientNum.wireless += clientList[thisClientMacAddr].macRepeat;
totalClientNum.wireless_ifnames[clientList[thisClientMacAddr].isWL-1] += clientList[thisClientMacAddr].macRepeat;
wirelessListArray[thisClientMacAddr] = originData.wlList_5g[i][1];
}
else {
if(clientList[thisClientMacAddr].isWL == 0) {
clientList[thisClientMacAddr].isWL = 2;
wirelessListArray[thisClientMacAddr] = originData.wlList_5g[i][1];
}
}
}
for(var i=0; i<originData.wlList_5g_2.length; i++){
var thisClientMacAddr = (typeof originData.wlList_5g_2[i][0] == "undefined") ? false : originData.wlList_5g_2[i][0].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(originData.wlList_5g_2[i][1] == "Yes") {
clientList[thisClientMacAddr].rssi = originData.wlList_5g_2[i][3];
clientList[thisClientMacAddr].isWL = 3;
totalClientNum.wireless += clientList[thisClientMacAddr].macRepeat;
totalClientNum.wireless_ifnames[clientList[thisClientMacAddr].isWL-1] += clientList[thisClientMacAddr].macRepeat;
wirelessListArray[thisClientMacAddr] = originData.wlList_5g_2[i][1];
}
else {
if(clientList[thisClientMacAddr].isWL == 0) {
clientList[thisClientMacAddr].isWL = 3;
wirelessListArray[thisClientMacAddr] = originData.wlList_5g_2[i][1];
}
}
}
if(typeof login_mac_str == "function"){
var thisClientMacAddr = (typeof login_mac_str == "undefined") ? false : login_mac_str().toUpperCase();
if(typeof clientList[thisClientMacAddr] != "undefined"){
clientList[thisClientMacAddr].isLogin = true;
}
}
for(var i=0; i<originData.qosRuleList.length; i++){
var thisClient = originData.qosRuleList[i].split(">");
var thisClientMacAddr = (typeof thisClient[1] == "undefined") ? false : thisClient[1].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(typeof clientList[thisClientMacAddr] != "undefined"){
clientList[thisClientMacAddr].qosLevel = thisClient[5];
}
}
for(var i = 0; i < leaseArray.mac.length; i += 1) {
if(typeof clientList[leaseArray.mac[i]] != "undefined"){
clientList[leaseArray.mac[i]].ipMethod = "DHCP";
}
}
for(var i=0; i<originData.staticList.length; i++){
if('0' == "0") break;
var thisClient = originData.staticList[i].split(">");
var thisClientMacAddr = (typeof thisClient[0] == "undefined") ? false : thisClient[0].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(typeof clientList[thisClientMacAddr] != "undefined"){
if(clientList[thisClientMacAddr].ipMethod == "DHCP") {
if(clientList[thisClientMacAddr].ip == thisClient[1] || clientList[thisClientMacAddr].ip == "offline")
clientList[thisClientMacAddr].ipMethod = "Manual";
}
}
}
for(var i = 0; i < originData.wtf_rulelist.length; i += 1) {
var thisClient = originData.wtf_rulelist[i].split(">");
var thisClientMacAddr = (typeof thisClient[1] == "undefined") ? false : thisClient[1].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined") {
continue;
}
if(typeof clientList[thisClientMacAddr] != "undefined") {
clientList[thisClientMacAddr].wtfast = parseInt(thisClient[0]);
}
}
wirelessList = "";
Object.keys(wirelessListArray).forEach(function(key) {
if(key != "") {
var clientMac = key
var clientMacState = wirelessListArray[key];
wirelessList += "<" + clientMac + ">" + clientMacState;
if(typeof clientList[clientMac] != "undefined") {
var wirelessOnline = (clientMacState.split(">")[0] == "Yes") ? true : false;
if(clientList[clientMac].ip == "offline" && wirelessOnline) {
clientList[clientMac].isOnline = false;
totalClientNum.wireless--;
totalClientNum.wireless_ifnames[clientList[clientMac].isWL-1]--;
}
else { //If wireless device offline, but the device value not delete in fromNetworkmapd in real time, so need update the totalClientNum
if(clientList[clientMac].isOnline && !wirelessOnline) {
totalClientNum.online--;
}
clientList[clientMac].isOnline = wirelessOnline;
}
}
}
});
var nmpCount = 0;
for(var i = 0; i < originData.nmpClient.length; i += 1) {
var thisClient = originData.nmpClient[i].split(">");
var thisClientMacAddr = ((typeof thisClient[0] == "undefined") || thisClient[0] == "" || thisClient[0].length != 12) ? false : thisClient[0].toUpperCase().substring(0, 2) + ":" +
thisClient[0].toUpperCase().substring(2, 4) + ":" + thisClient[0].toUpperCase().substring(4, 6) + ":" + thisClient[0].toUpperCase().substring(6, 8) + ":" +
thisClient[0].toUpperCase().substring(8, 10) + ":" + thisClient[0].toUpperCase().substring(10, 12);
if(!thisClientMacAddr) {
continue;
}
nmpCount++;
if(nmpCount > 100)
break;
if(typeof clientList[thisClientMacAddr] == "undefined") {
var thisClientType = (typeof thisClient[4] == "undefined") ? "0" : thisClient[4];
var thisClientName = (typeof thisClient[2] == "undefined") ? thisClientMacAddr : (thisClient[2].trim() == "") ? thisClientMacAddr : thisClient[2].trim();
clientList.push(thisClientMacAddr);
clientList[thisClientMacAddr] = new setClientAttr();
clientList[thisClientMacAddr].from = "nmpClient";
if(!downsize_4m_support) {
clientList[thisClientMacAddr].type = thisClientType;
clientList[thisClientMacAddr].defaultType = thisClientType;
}
clientList[thisClientMacAddr].mac = thisClientMacAddr;
clientList[thisClientMacAddr].name = replaceClientName(thisClientName, thisClientMacAddr);
if(thisClientName != thisClientMacAddr && clientList[thisClientMacAddr].type == "0" && !downsize_4m_support) {
clientList[thisClientMacAddr].type = convType(thisClientName);
clientList[thisClientMacAddr].defaultType = clientList[thisClientMacAddr].type;
}
if(clientList[thisClientMacAddr].vendor == "") {
var ouiVenderName = "";
var manufacturer_id = transformManufacturerName(thisClientMacAddr.replace(/\:/g,"").substring(0, 6));
if(ouiClientListArray[manufacturer_id] != undefined) {
ouiVenderName = transformManufacturerName(ouiClientListArray[manufacturer_id]);
ouiVenderName = ouiVenderName.toLowerCase();
ouiVenderName = ouiVenderName.toUpperCase().charAt(0) + ouiVenderName.substring(1);
}
clientList[thisClientMacAddr].vendor = ouiVenderName;
}
}
else if(!clientList[thisClientMacAddr].isOnline) {
clientList[thisClientMacAddr].from = "nmpClient";
}
}
cookie.set("wireless_list_" + local_mac, wirelessList, 1/24/60*3);//3 minutes
if(stainfo_support) {
var updateStaInfo = function(wlLog, wlMode) {
for(var i = 0; i < wlLog.length; i += 1) {
var thisClientMacAddr = (typeof wlLog[i][0] == "undefined") ? false : wlLog[i][0].toUpperCase();
if(!thisClientMacAddr || typeof clientList[thisClientMacAddr] == "undefined"){
continue;
}
if(clientList[thisClientMacAddr].isOnline && (clientList[thisClientMacAddr].isWL == wlMode)) {
clientList[thisClientMacAddr].curTx = (wlLog[i][1].trim() == "") ? "": wlLog[i][1].trim() + " Mbps";
clientList[thisClientMacAddr].curRx = (wlLog[i][2].trim() == "") ? "": wlLog[i][2].trim() + " Mbps";
clientList[thisClientMacAddr].wlConnectTime = wlLog[i][3];
}
}
};
updateStaInfo(originData.wlListInfo_2g, 1);
updateStaInfo(originData.wlListInfo_5g, 2);
updateStaInfo(originData.wlListInfo_5g_2, 3);
}

var venderArrayRE = /(adobe|amazon|apple|asus|belkin|bizlink|buffalo|dell|d-link|fujitsu|google|hon hai|htc|huawei|i
bm|lenovo|nec|microsoft|panasonic|pioneer|ralink|samsung|sony|synology|toshiba|tp-link|vmware)/;
function transformManufacturerName(_db_manufacturerName) {
var manufacturerName = "";
var manufacturerMatch = _db_manufacturerName.trim().toLowerCase().match(venderArrayRE);
if(Boolean(manufacturerMatch)) {
manufacturerName = manufacturerMatch[0];
}
else {
manufacturerName = _db_manufacturerName.trim();
}
return manufacturerName;
}
function convType(str){
if(str.length == 0)
return 0;
/*
Unknown 0
Windows device 1
Router 2
Router 3
NAS/Server 4
IP Cam 5
Macbook 6
Game Console 7
Game Console 8
Android Phone 9
iPhone 10
Apple TV 11
Set-top Box 12
Windows device 13
iMac 14
ROG 15
Game Console 16
Game Console 17
Printer 18
Windows Phone 19
Android Tablet 20
iPad 21
Linux Device 22
Smart TV 23
Repeater 24
Kindle 25
Scanner 26
Chromecast 27
ASUS smartphone 28
ASUS Pad 29
Windows 30
Android 31
Mac OS 32
Smartphone 33
Desktop 34
*/
var siganature = [[], ["win", "pc", "nb"], ["rt-", "dsl-", "pl-"], [], ["nas", "storage"], ["cam"], ["mac", "mbp", "
mba"], ["play station", "playstation", "xbox"],
[], ["android", "htc"], ["iphone", "ipod"], ["appletv", "apple tv", "apple-tv"], [], [], ["imac"], ["rog"], [], [],
["epson", "fuji xerox", "hp", "canon", "brother"],
[], [], ["ipad"], ["linux"], [], ["rp-", "ea-", "wmp-"]];
: